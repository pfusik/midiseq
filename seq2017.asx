	opt	h-
	ins	'seq.com'

	opt	h+

	org	$9456
	jsr	cmdline
	nop

	org	$9484
	dta	d'    Welcome to    '
;	dta	d'                  '
	dta	d'  MIDI SEQUENCER  '
	dta	d'  --------------  '
;	dta	d'                  '
	dta	d'   version 1.15   '
	dta	d' (c) 1993 M.Sygit '
	dta	d' composing&cmdline'
	dta	d' (c) 2017 P.Fusik '

	org	$9c9f
	jsr	playnote

buf	equ	$8d24

	org	$b871
playnote
	sta	$9cc0	; velocity
	ldx	#0
	lda	$ab19	; previous note
	bmi	norelease
	sta	buf+1
	stx	buf+2
	lda	($92,x)
	eor	#$80
	sta	buf
	sta	$ab19
	ldx	#3
norelease
	lda	$9cc0
	beq	silence
	sta	buf+4,x	; velocity
	dey
	lda	($82),y	; note
	sta	buf+3,x
	sta	$ab19
	lda	($92),0+	; channel
	eor	#$c0
	sta	buf,x
	eor	#$c0^$90
	sta	buf+2,x
	lda	($92),y	; program
	sta	buf+1,x
	txa
	add	#5
	tax
silence
	stx	$8f
	jsr	$ab1a	; motor on
	jsr	$b806	; send buf
	jmp	$ab28	; motor off

filename	equ	$afd9
IOCB_FILENAME	equ	0

cmdline
; Get filename from SpartaDOS...
	lda	11
	cmp	#$c0
	bcs	no_sparta
	ldy	#3
	lda	(10),y
	cmp	#{jmp a:}
	bne	no_sparta
	iny
	mva	(10),y	sparta_jsr+1
	iny
	mva	(10),y	sparta_jsr+2
sparta_jsr
	jsr	$2020
	beq	no_filename
	ldy	#33
sparta_copy
	mva	(10),y	filename-33,y+
	cmp	#$9b
	bne	sparta_copy
filename_ok
	pla:pla
	jmp	$ac56	; open
no_sparta

	ift	IOCB_FILENAME
arg_str	equ	$82	; 2
arg_len	equ	$84
arg_idx	equ	$85

; ... or channel #0
	lda	$342	; command
	cmp	#5	; read line
	bne	no_filename
	lda	$343	; status
	bmi	no_filename
; don't assume the line is EOL-terminated
; DOS II+/D overwrites the EOL with ".COM"
; that's why we rely on the length
	lda	$349	; length hi
	bne	no_filename
	ldx	$348	; length lo
	beq	no_filename
	inx:inx
	stx	arg_len
; give access to three bytes before the input buffer
; in DOS II+/D the device prompt ("D1:") is there
	lda	$344
	sub	#3
	sta	arg_str
	lda	$345
	sbc	#0
	sta	arg_str+1
; first skip ST2VBXE.COM
; it's space-terminated on DOS II+/D,
; NUL-terminated on MyDOS
	ldy	#3
	lda	#' '
arg_skip_exe
	cmp	(arg_str),y
	bcs	arg_space_1
	iny
	cpy	arg_len
	bcc	arg_skip_exe
	bcs	no_filename	!
; then skip spaces/NULs
arg_space
	cmp	(arg_str),y
	bcc	arg_arg
arg_space_1
	iny
	cpy	arg_len
	bcc	arg_space
	eif

no_filename
	lda	#$22
	ldy	#1
	rts

	ift	IOCB_FILENAME
; now we have the filename
arg_arg
	sty	arg_idx
	jsr	arg_is_device
	bcc	arg_default_device
	cpy	arg_len
	bcs	arg_default_device
; filename with device, congratulations, we can use it
	ldx	#0
	beq	arg_copy	!
; filename without device
arg_default_device
	ldy	#0
	jsr	arg_is_device
	bcc	arg_d_device
; device = DOS II+/D prompt
	tya
	tax
	inx
	mva:rpl	(arg_str),y	filename,y-
	bmi	arg_copy	!
; device = "D:"
arg_d_device
	mva	#'D'	filename
	mva	#':'	filename+1
	ldx	#2
; copy filename
arg_copy
	ldy	arg_idx
arg_copy_loop
	mva	(arg_str),y+	filename,x+
	cpy	arg_len
	bcc	arg_copy_loop
	mva	#$9b	filename,x
	jmp	filename_ok

; Returns C=1 if (arg_str),y looks like
; Atari OS device name: /[A-Z][1-9]?:/
arg_is_device
	lda	(arg_str),y
	cmp	#'A'
	bcc	arg_is_device_ret
	cmp	#'Z'+1
	bcs	arg_is_device_no
	iny
	lda	(arg_str),y
	cmp	#'1'
	bcc	arg_is_device_ret
	ert	'9'+1!=':'
	cmp	#':'
	bcs	arg_is_device_end
	iny
	lda	(arg_str),y
	cmp	#':'
arg_is_device_end
	beq	arg_is_device_ret
arg_is_device_no
	clc
arg_is_device_ret
	rts
	eif
